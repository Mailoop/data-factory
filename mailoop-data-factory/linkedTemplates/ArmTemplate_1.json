{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mailoop-data-factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/JoinEmployeesWithDomains')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employeeExtract",
								"type": "DatasetReference"
							},
							"name": "RawEmployees",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "domainsExtracts",
								"type": "DatasetReference"
							},
							"name": "RawDomains",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empoyeeWithDomains",
								"type": "DatasetReference"
							},
							"name": "employeeWithDomains"
						}
					],
					"transformations": [
						{
							"name": "Employee",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "employeesWithSelect"
						},
						{
							"name": "Domains",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "domainsWithSelect"
						},
						{
							"name": "JoinEmployeeWithDomain"
						}
					],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> RawEmployees\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> RawDomains\nRawEmployees derive(emp_id = toString(byName('id')),\n\t\temp_email_address = toString(byName('email_address')),\n\t\temp_exit_date = toString(byName('exit_date')),\n\t\temp_active = toString(byName('active')),\n\t\temp_domain_id = toString(byName('domain_id')),\n\t\temp_user_id = toString(byName('user_id')),\n\t\temp_created_at = toString(byName('created_at')),\n\t\temp_updated_at = toString(byName('updated_at')),\n\t\temp_mailbox_user_id = toString(byName('mailbox_user_id')),\n\t\temp_last_call_success = toString(byName('last_call_success')),\n\t\temp_time_zone = toString(byName('time_zone')),\n\t\temp_locale = toString(byName('locale')),\n\t\temp_admin = toString(byName('admin')),\n\t\temp_is_list = toString(byName('is_list')),\n\t\temp_entry_date = toString(byName('entry_date')),\n\t\temp_user_unique_id = toString(byName('user_unique_id')),\n\t\temp_parent_id = toString(byName('parent_id')),\n\t\temp_country = toString(byName('country')),\n\t\temp_language = toString(byName('language')),\n\t\temp_encrypted_email_address = toString(byName('encrypted_email_address')),\n\t\temp_working_time = toString(byName('working_time')),\n\t\temp_is_api_available = toString(byName('is_api_available')),\n\t\temp_behaviors_group_id = toString(byName('behaviors_group_id')),\n\t\temp_analytics_end_date = toString(byName('analytics_end_date')),\n\t\temp_analytics_start_date = toString(byName('analytics_start_date')),\n\t\temp_analytics_data_extraction_done = toString(byName('analytics_data_extraction_done')),\n\t\temp_smart_deconnexion_country_code = toString(byName('smart_deconnexion_country_code')),\n\t\temp_force_unactive = toString(byName('force_unactive')),\n\t\temp_data_extracted_until = toString(byName('data_extracted_until')),\n\t\temp_directory_type = toString(byName('directory_type')),\n\t\temp_is_directory_ressource_account = toString(byName('is_directory_ressource_account'))) ~> Employee\nEmployee select(mapColumn(\n\t\temp_id,\n\t\temp_email_address,\n\t\temp_exit_date,\n\t\temp_active,\n\t\temp_domain_id,\n\t\temp_user_id,\n\t\temp_created_at,\n\t\temp_updated_at,\n\t\temp_mailbox_user_id,\n\t\temp_last_call_success,\n\t\temp_time_zone,\n\t\temp_locale,\n\t\temp_admin,\n\t\temp_is_list,\n\t\temp_entry_date,\n\t\temp_user_unique_id,\n\t\temp_parent_id,\n\t\temp_country,\n\t\temp_language,\n\t\temp_encrypted_email_address,\n\t\temp_working_time,\n\t\temp_is_api_available,\n\t\temp_behaviors_group_id,\n\t\temp_analytics_end_date,\n\t\temp_analytics_start_date,\n\t\temp_analytics_data_extraction_done,\n\t\temp_smart_deconnexion_country_code,\n\t\temp_force_unactive,\n\t\temp_data_extracted_until,\n\t\temp_directory_type,\n\t\temp_is_directory_ressource_account\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> employeesWithSelect\nRawDomains derive(dom_id = toString(byName('id')),\n\t\tdom_url = toString(byName('url')),\n\t\tdom_company_id = toString(byName('company_id'))) ~> Domains\nDomains select(mapColumn(\n\t\tdom_id,\n\t\tdom_url,\n\t\tdom_company_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> domainsWithSelect\nemployeesWithSelect, domainsWithSelect join(emp_domain_id == dom_id,\n\tjoinType:'left',\n\tbroadcast: 'none')~> JoinEmployeeWithDomain\nJoinEmployeeWithDomain sink(input(\n\t\t{id\turl\tcompany_id\tcreated_at\tupdated_at} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> employeeWithDomains"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/main')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emailRecipientExtract",
								"type": "DatasetReference"
							},
							"name": "RawEmailRecipient",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "emailsExtract",
								"type": "DatasetReference"
							},
							"name": "RawEmails",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "domainsExtracts",
								"type": "DatasetReference"
							},
							"name": "domains",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "employeeExtract",
								"type": "DatasetReference"
							},
							"name": "RawEmployee",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "byWeekResults",
								"type": "DatasetReference"
							},
							"name": "byWeekSink"
						},
						{
							"dataset": {
								"referenceName": "byEmployeeResults",
								"type": "DatasetReference"
							},
							"name": "byRecipientSink"
						}
					],
					"transformations": [
						{
							"name": "mappedEmailRecipients",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "mappedEmails",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "selectedEmailsRecipients"
						},
						{
							"name": "selectedsEmails"
						},
						{
							"name": "withFilenames"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "MapDrifted2",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "selectEmployees"
						},
						{
							"name": "selectDomains"
						},
						{
							"name": "employeeWithDomains"
						},
						{
							"name": "emailRecipientWithRecipients"
						},
						{
							"name": "WithEmails"
						},
						{
							"name": "RemoveJoindDuplicateColumns"
						},
						{
							"name": "BeforeSinkSelect"
						}
					],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> RawEmailRecipient\nsource(output(\n\t\tid as string,\n\t\tsender_id as string,\n\t\tparent_id as string,\n\t\temail_thread_id as string,\n\t\tsubject as string,\n\t\tdate as string,\n\t\tmessage_id as string,\n\t\tcreated_at as string,\n\t\tupdated_at as string,\n\t\tmailbox_message_id as string,\n\t\tperimeter as string,\n\t\tis_answer as string,\n\t\tis_event_message as string,\n\t\tin_reply_to as string,\n\t\ttime_zone as string,\n\t\tthread_subject as string,\n\t\tis_forwarded as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> RawEmails\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> domains\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> RawEmployee\nRawEmailRecipient derive(er_id = toString(byName('id')),\n\t\ter_recipient_id = toString(byName('recipient_id')),\n\t\ter_email_id = toString(byName('email_id')),\n\t\ter_status = toString(byName('status')),\n\t\ter_created_at = toString(byName('updated_at')),\n\t\ter_updated_at = toString(byName('updated_at')),\n\t\ter_through_list = toString(byName('through_list')),\n\t\ter_read_delay = toString(byName('read_delay')),\n\t\ter_mailbox_message_id = toString(byName('mailbox_message_id')),\n\t\ter_is_read = toString(byName('is_read')),\n\t\ter_read_time = toString(byName('read_time')),\n\t\ter_delivered_date = toString(byName('delivered_date'))) ~> mappedEmailRecipients\nRawEmails derive(em_id = toString(byName('id')),\n\t\tem_sender_id = toString(byName('sender_id')),\n\t\tem_parent_id = toString(byName('parent_id')),\n\t\tem_email_thread_id = toString(byName('email_thread_id')),\n\t\tem_subject = toString(byName('subject')),\n\t\tem_date = toString(byName('date')),\n\t\tem_message_id = toString(byName('message_id')),\n\t\tem_created_at = toString(byName('created_at')),\n\t\tem_updated_at = toString(byName('updated_at')),\n\t\tem_mailbox_message_id = toString(byName('mailbox_message_id')),\n\t\tem_perimeter = toString(byName('perimeter')),\n\t\tem_is_answer = toString(byName('is_answer')),\n\t\tem_is_event_message = toString(byName('is_event_message')),\n\t\tem_in_reply_to = toString(byName('in_reply_to')),\n\t\tem_time_zone = toString(byName('time_zone')),\n\t\tem_thread_subject = toString(byName('thread_subject')),\n\t\tem_is_forwarded = toString(byName('is_forwarded'))) ~> mappedEmails\nmappedEmailRecipients select(mapColumn(\n\t\ter_id,\n\t\ter_recipient_id,\n\t\ter_email_id,\n\t\ter_status,\n\t\ter_through_list,\n\t\ter_read_delay,\n\t\ter_mailbox_message_id,\n\t\ter_is_read,\n\t\ter_read_time,\n\t\ter_delivered_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectedEmailsRecipients\nmappedEmails select(mapColumn(\n\t\tem_id,\n\t\tem_sender_id,\n\t\tem_parent_id,\n\t\tem_email_thread_id,\n\t\tem_subject,\n\t\tem_date,\n\t\tem_message_id,\n\t\tem_mailbox_message_id,\n\t\tem_perimeter,\n\t\tem_is_answer,\n\t\tem_is_event_message,\n\t\tem_in_reply_to,\n\t\tem_time_zone,\n\t\tem_thread_subject,\n\t\tem_is_forwarded\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectedsEmails\nRemoveJoindDuplicateColumns derive(filenameYearWeek = concat(\n    toString(year(toTimestamp(em_date))),\n    '-',\n    toString(weekOfYear((toTimestamp(em_date)))),\n    '.csv'\n),\n\t\tfilenameRecipientId = concat(\n    toString(er_recipient_id),\n    '.csv'\n),\n\t\tmonth = month(toTimestamp(em_date)),\n\t\tyear = year(toTimestamp(em_date)),\n\t\tday = dayOfMonth(toTimestamp(em_date))) ~> withFilenames\nRawEmployee derive(emp_id = toString(byName('id')),\n\t\temp_email_address = toString(byName('email_address')),\n\t\temp_exit_date = toString(byName('exit_date')),\n\t\temp_active = toString(byName('active')),\n\t\temp_domain_id = toString(byName('domain_id')),\n\t\temp_user_id = toString(byName('user_id')),\n\t\temp_mailbox_user_id = toString(byName('mailbox_user_id')),\n\t\temp_last_call_success = toString(byName('last_call_success')),\n\t\temp_time_zone = toString(byName('time_zone')),\n\t\temp_locale = toString(byName('locale')),\n\t\temp_admin = toString(byName('admin')),\n\t\temp_is_list = toString(byName('is_list')),\n\t\temp_entry_date = toString(byName('entry_date')),\n\t\temp_user_unique_id = toString(byName('user_unique_id')),\n\t\temp_country = toString(byName('country')),\n\t\temp_language = toString(byName('language')),\n\t\temp_encrypted_email_address = toString(byName('encrypted_email_address')),\n\t\temp_analytics_end_date = toString(byName('analytics_end_date')),\n\t\temp_analytics_start_date = toString(byName('analytics_start_date')),\n\t\tdirectory_type = toString(byName('directory_type')),\n\t\temp_data_extracted_until = toString(byName('data_extracted_until')),\n\t\tis_directory_ressource_account = toString(byName('is_directory_ressource_account'))) ~> MapDrifted1\ndomains derive(dom_id = toString(byName('id')),\n\t\tdom_url = toString(byName('url')),\n\t\tdom_company_id = toString(byName('company_id'))) ~> MapDrifted2\nMapDrifted1 select(mapColumn(\n\t\temp_id,\n\t\temp_active,\n\t\temp_domain_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectEmployees\nMapDrifted2 select(mapColumn(\n\t\tdom_id,\n\t\tdom_url,\n\t\tdom_company_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectDomains\nselectEmployees, selectDomains join(emp_domain_id == dom_id,\n\tjoinType:'left',\n\tbroadcast: 'none')~> employeeWithDomains\nselectedEmailsRecipients, employeeWithDomains join(er_recipient_id == emp_id,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> emailRecipientWithRecipients\nemailRecipientWithRecipients, selectedsEmails join(er_email_id == em_id,\n\tjoinType:'left',\n\tbroadcast: 'none')~> WithEmails\nWithEmails select(mapColumn(\n\t\ter_id,\n\t\ter_recipient_id,\n\t\ter_status,\n\t\ter_through_list,\n\t\ter_read_delay,\n\t\ter_mailbox_message_id,\n\t\ter_is_read,\n\t\ter_read_time,\n\t\ter_delivered_date,\n\t\temp_active,\n\t\temp_domain_id,\n\t\tdom_url,\n\t\tdom_company_id,\n\t\tem_id,\n\t\tem_sender_id,\n\t\tem_parent_id,\n\t\tem_email_thread_id,\n\t\tem_subject,\n\t\tem_date,\n\t\tem_message_id,\n\t\tem_mailbox_message_id,\n\t\tem_perimeter,\n\t\tem_is_answer,\n\t\tem_is_event_message,\n\t\tem_in_reply_to,\n\t\tem_time_zone,\n\t\tem_thread_subject,\n\t\tem_is_forwarded\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveJoindDuplicateColumns\nwithFilenames select(mapColumn(\n\t\ter_id,\n\t\ter_recipient_id,\n\t\ter_status,\n\t\ter_through_list,\n\t\ter_read_delay,\n\t\ter_mailbox_message_id,\n\t\ter_is_read,\n\t\ter_read_time,\n\t\ter_delivered_date,\n\t\temp_active,\n\t\temp_domain_id,\n\t\tdom_url,\n\t\tdom_company_id,\n\t\tem_id,\n\t\tem_sender_id,\n\t\tem_parent_id,\n\t\tem_email_thread_id,\n\t\tem_subject,\n\t\tem_date,\n\t\tem_message_id,\n\t\tem_mailbox_message_id,\n\t\tem_perimeter,\n\t\tem_is_answer,\n\t\tem_is_event_message,\n\t\tem_in_reply_to,\n\t\tem_time_zone,\n\t\tem_thread_subject,\n\t\tem_is_forwarded,\n\t\tfilenameYearWeek,\n\t\tmonth,\n\t\tyear,\n\t\tday,\n\t\tfilenameRecipientId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BeforeSinkSelect\nBeforeSinkSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'filenameYearWeek',\n\ttruncate: true) ~> byWeekSink\nBeforeSinkSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'filenameRecipientId',\n\ttruncate: true) ~> byRecipientSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinEmailOnEmailRecipients')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "mainDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "main",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawEmailRecipient": {},
									"RawEmails": {},
									"domains": {},
									"RawEmployee": {},
									"byWeekSink": {},
									"byRecipientSink": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "JoinEmployeesWithDomains",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JoinEmployeesWithDomains",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawEmployees": {},
									"RawDomains": {},
									"employeeWithDomains": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JoinEmployeesWithDomains')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CollectEmailTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CollectEmails",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2019-10-22T18:03:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CollectTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyEmailRecipients",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2019-10-22T17:55:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		}
	]
}